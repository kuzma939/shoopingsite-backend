import express from 'express';
import crypto from 'crypto';
import TempOrder from '../../models/TempOrder.js';
import CartItem from '../../models/CartItem.js';
import Order from '../../models/Order.js';
import { sendClientConfirmation, sendAdminNotification } from '../../utils/mailer.js';

const router = express.Router();

function generateSignature(secretKey, values) {
  const dataString = values.join(';');
  return crypto.createHmac('md5', secretKey).update(dataString).digest('hex');
}
{/*router.get('/success', (req, res) => {
  res.redirect(`https://www.latore.shop/payment-success?order=${req.query.order}`);
});*/}

router.post('/', async (req, res) => {
  try {
    const { amount, order, resultUrl, serverUrl } = req.body;
    console.log('üßæ ORDER from frontend:', order);

    const merchantAccount = process.env.WAYFORPAY_MERCHANT;
    const merchantDomainName = 'latore.shop';
    const secretKey = process.env.WAYFORPAY_SECRET;
    const orderReference = crypto.randomUUID();
  const orderDate = Math.floor(Date.now() / 1000);

    if (!order.sessionId) return res.status(400).send('Missing sessionId');

    const cartItems = await CartItem.find({ sessionId: order.sessionId });
    if (!cartItems.length) return res.status(400).send('Cart is empty');
    const totalFromCart = cartItems.reduce((acc, item) => {
      return acc + item.price * item.quantity;
    }, 0);
    
    const formattedAmount = totalFromCart.toFixed(2);
    
    const cleanText = (text) =>
      String(text || '')
        .replace(/['"¬´¬ª]/g, '')       // –ª–∞–ø–∫–∏
        .replace(/–≥—Ä–Ω|‚Ç¥|\$|\s+–≥—Ä–Ω/gi, '') // –≤–∞–ª—é—Ç–∞ + –ø—Ä–æ–±—ñ–ª –ø–µ—Ä–µ–¥ –Ω–µ—é
        .replace(/[\(\)]/g, '')       // –¥—É–∂–∫–∏
        .trim();
        const productNames = cartItems.map(i => cleanText(i.name));
    
    const productCounts = cartItems.map(i => String(i.quantity));
    const productPrices = cartItems.map(i => Number(i.price).toFixed(2));

    if (
      !productNames.length ||
      productNames.some(n => !n) ||
      productNames.length !== productCounts.length ||
      productNames.length !== productPrices.length
    ) {
      console.error('‚ùå –î–∞–Ω—ñ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ:', {
        productNames,
        productCounts,
        productPrices
      });
      return res.status(400).send('Invalid cart data');
    }

    const signatureSource = [
      merchantAccount,
      merchantDomainName,
      orderReference,
      String(orderDate),
      formattedAmount,
      'UAH',
      ...productNames,
      ...productCounts,
      ...productPrices,
    ];

    console.log('üîç DEBUG signatureSource elements:');
    signatureSource.forEach((v, i) => {
      console.log(`${i + 1}.`, JSON.stringify(v));
    });

    const signature = generateSignature(secretKey, signatureSource);
    console.log('üìê –°—Ç—Ä—ñ—á–∫–∞ –ø—ñ–¥–ø–∏—Å—É:', signatureSource.join(';'));
    console.log('‚úÖ –ü—ñ–¥–ø–∏—Å:', signature);

    await TempOrder.create({ orderId: orderReference, orderData: order });

    const html = `
      <form method="POST" action="https://secure.wayforpay.com/pay">
        <input type="hidden" name="merchantAccount" value="${merchantAccount}" />
        <input type="hidden" name="merchantDomainName" value="${merchantDomainName}" />
        <input type="hidden" name="orderReference" value="${orderReference}" />
        <input type="hidden" name="orderDate" value="${orderDate}" />
        <input type="hidden" name="amount" value="${formattedAmount}" />
        <input type="hidden" name="currency" value="UAH" />

        ${productNames.map(p => `<input type="hidden" name="productName" value="${p}" />`).join('')}
        ${productCounts.map(c => `<input type="hidden" name="productCount" value="${c}" />`).join('')}
        ${productPrices.map(p => `<input type="hidden" name="productPrice" value="${p}" />`).join('')}
       
        <input type="hidden" name="returnUrl" value="${resultUrl}?order=${orderReference}" />

<input type="hidden" name="serviceUrl" value="${serverUrl}" />
        <input type="hidden" name="merchantSignature" value="${signature}" />
        <script>document.forms[0].submit();</script>
      </form>
    `;

    res.setHeader('Content-Type', 'text/html');
    res.send(html);
  } catch (err) {
    console.error('‚ùå WayForPay –ø–æ–º–∏–ª–∫–∞:', err);
    res.status(500).send('WayForPay error');
  }
});
router.post('/callback', async (req, res) => {
  try {
    const secretKey = process.env.WAYFORPAY_SECRET;
    let parsed = req.body;

    console.log('üì© RAW CALLBACK BODY:', req.body);

    // üß© –Ø–∫—â–æ —Ç—ñ–ª–æ —É –≤–∏–≥–ª—è–¥—ñ –æ–¥–Ω–æ–≥–æ JSON-–∫–ª—é—á–∞ (–ª–∞–º–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    const firstKey = Object.keys(req.body)[0];
    if (firstKey && firstKey.startsWith('{') && firstKey.endsWith('}')) {
      try {
        parsed = JSON.parse(firstKey);
        console.log('‚úÖ –†–æ–∑–ø–∞—Ä—Å–µ–Ω–µ —Ç—ñ–ª–æ:', parsed);
      } catch (e) {
        console.error('‚ùå JSON parsing error:', e);
        return res.status(400).send('Malformed callback JSON');
      }
    }

    // üõ† –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
    const normalizeMap = {
      '—Å—Ö–≤–∞–ª–µ–Ω–æ': 'Approved',
      '–∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ': 'Approved',
      '–¥–æ–±—Ä–µ': 'Ok',
      '–æ–∫': 'Ok',
      '–≥—Ä–Ω': 'UAH',
      'uah': 'UAH',
      '–∫–∞—Ä—Ç–∫–∞': 'card',
      'debit': 'debit',
      '–¥–µ–±–µ—Ç': 'debit',
    };
    const norm = (v) => normalizeMap[(v || '').toString().trim().toLowerCase()] || v;

    const {
      merchantAccount,
      orderReference,
      amount,
      currency,
      authCode,
      cardPan,
      transactionStatus,
      reason,
      reasonCode,
      fee,
      paymentSystem,
      processingDate,
      merchantSignature,
    } = parsed;

    const time = processingDate || parsed.time;

    const signatureSource = [
      norm(merchantAccount),
      norm(orderReference),
      Number(amount).toFixed(2),
      norm(currency),
      norm(authCode),
      norm(cardPan),
      norm(transactionStatus),
      norm(reason),
      norm(reasonCode),
      Number(fee).toFixed(2),
      norm(paymentSystem),
      norm(time),
    ];

    const expectedSignature = crypto
      .createHmac('md5', secretKey)
      .update(signatureSource.join(';'))
      .digest('hex');

    console.log('üîê Signature source string:', signatureSource.join(';'));
    console.log('‚úÖ –û—á—ñ–∫—É–≤–∞–Ω–∏–π –ø—ñ–¥–ø–∏—Å:', expectedSignature);
    console.log('üì® –û—Ç—Ä–∏–º–∞–Ω–∏–π –ø—ñ–¥–ø–∏—Å:', merchantSignature);

    if (merchantSignature !== expectedSignature) {
      console.warn('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø—ñ–¥–ø–∏—Å —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –¥–∑–≤—ñ–Ω–∫—É');
      return res.status(403).send('Invalid signature');
    }

    // ‚úÖ –Ø–∫—â–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞
    if (norm(transactionStatus) === 'Approved') {
      const temp = await TempOrder.findOne({ orderId: orderReference });
      if (!temp) return res.status(404).send('Temp order not found');

      const savedOrder = await Order.create({
        ...temp.orderData,
        isPaid: true,
        paymentId: orderReference,
        amountPaid: parseFloat(amount),
      });

      await TempOrder.deleteOne({ orderId: orderReference });

      await sendClientConfirmation(savedOrder);
      const cartItems = await CartItem.find({ sessionId: savedOrder.sessionId });
      await sendAdminNotification(savedOrder, cartItems);

      if (savedOrder.sessionId) {
        await CartItem.deleteMany({ sessionId: savedOrder.sessionId });
      }

      const responseTime = Math.floor(Date.now() / 1000);
      const callbackResponse = [
        orderReference,
        'accept',
        responseTime,
      ];
      const responseSignature = crypto
        .createHmac('md5', secretKey)
        .update(callbackResponse.join(';'))
        .digest('hex');

      return res.json({
        orderReference,
        status: 'accept',
        time: responseTime,
        signature: responseSignature,
      });
    }

    // üí§ –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –Ω–µ Approved ‚Äî –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
    res.status(200).send('Ignored');
  } catch (err) {
    console.error('‚ùå WayForPay callback error:', err);
    res.status(500).send('Callback error');
  }
});
export default router;
{/*}
import express from 'express';
import crypto from 'crypto';
import TempOrder from '../../models/TempOrder.js';
import CartItem from '../../models/CartItem.js';

const router = express.Router();

function generateSignature(secretKey, values) {
  const dataString = values.join(';');
  console.log('üìê –°—Ç—Ä—ñ—á–∫–∞ –ø—ñ–¥–ø–∏—Å—É (—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞):', dataString);
  return crypto.createHmac('md5', secretKey).update(dataString).digest('hex');
}

router.post('/', async (req, res) => {
  try {
    const { amount, order, resultUrl, serverUrl } = req.body;

    const merchantAccount = process.env.WAYFORPAY_MERCHANT;
    const merchantDomainName = 'latore.shop';
    const secretKey = process.env.WAYFORPAY_SECRET;
    const orderReference = crypto.randomUUID();
    const orderDate = Math.floor(Date.now() / 1000);
    const currency = 'UAH';

    if (!order.sessionId) {
      return res.status(400).send('Missing sessionId');
    }

    const cartItems = await CartItem.find({ sessionId: order.sessionId });
    if (!cartItems.length) {
      return res.status(400).send('Cart is empty');
    }

    // üßº –û—á–∏—â–µ–Ω–Ω—è —Å—É–º–∏ –≤—ñ–¥ –ø—Ä–æ–±—ñ–ª—ñ–≤, ‚Ç¥, –≥—Ä–Ω, –∫–æ–º–∏
    const cleanAmount = typeof amount === 'string'
      ? amount.replace(/[^\d.,]/g, '').replace(/\s/g, '').replace(',', '.')
      : amount;

    const formattedAmount = Number(cleanAmount).toFixed(2);

    // üßπ –ù–∞–∑–≤–∏, —Ü—ñ–Ω–∏, –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
    const productNamesArray = cartItems.map(i =>
      String(i.name || i.–Ω–∞–∑–≤–∞ || '')
        .replace(/(–≥—Ä–Ω|‚Ç¥|uah)/gi, '')
        .replace(/[^\p{L}\p{N} _.,-]/gu, '')
        .replace(/\s+/g, ' ')
        .trim()
    );

    const productCountsArray = cartItems.map(i => String(i.quantity));

    const productPricesArray = cartItems.map(i =>
      Number(
        String(i.price || i.—Ü—ñ–Ω–∞ || '')
          .replace(/(–≥—Ä–Ω|‚Ç¥|uah)/gi, '')
          .replace(/[^\d.]/g, '')
      ).toFixed(2)
    );

    // üîó –î–ª—è –ø—ñ–¥–ø–∏—Å—É ‚Äî —Ä—è–¥–∫–∏ —á–µ—Ä–µ–∑ ;
    const productNames = productNamesArray.join(';');
    const productCounts = productCountsArray.join(';');
    const productPrices = productPricesArray.join(';');

    const signatureSource = [
      merchantAccount,
      merchantDomainName,
      orderReference,
      String(orderDate),
      formattedAmount,
      currency,
      productNames,
      productCounts,
      productPrices
    ];

    // üïµÔ∏è‚Äç‚ôÄÔ∏è –õ–æ–≥–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log('üîç –ï–ª–µ–º–µ–Ω—Ç–∏ –ø—ñ–¥–ø–∏—Å—É DEBUG:');
    signatureSource.forEach((val, i) => {
      console.log(`${i + 1}.`, JSON.stringify(val));
      if (/–≥—Ä–Ω|uah|‚Ç¥/i.test(val)) {
        console.warn('‚ùóÔ∏è‚ö†Ô∏è –£–í–ê–ì–ê! –£ –ø—ñ–¥–ø–∏—Å –ø—Ä–æ—Å–æ—á–∏–≤—Å—è —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–∏:', val);
      }
    });

    const signature = generateSignature(secretKey, signatureSource);
    console.log('‚úÖ –ü—ñ–¥–ø–∏—Å HMAC MD5:', signature);

    // üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    await TempOrder.create({ orderId: orderReference, orderData: order });

    // üßæ HTML —Ñ–æ—Ä–º–∞ WayForPay
    const html = `
      <form method="POST" action="https://secure.wayforpay.com/pay">
        <input type="hidden" name="merchantAccount" value="${merchantAccount}" />
        <input type="hidden" name="merchantDomainName" value="${merchantDomainName}" />
        <input type="hidden" name="orderReference" value="${orderReference}" />
        <input type="hidden" name="orderDate" value="${orderDate}" />
        <input type="hidden" name="amount" value="${formattedAmount}" />
        <input type="hidden" name="currency" value="${currency}" />
        <input type="hidden" name="productName" value="${productNames}" />
        <input type="hidden" name="productCount" value="${productCounts}" />
        <input type="hidden" name="productPrice" value="${productPrices}" />
        <input type="hidden" name="language" value="UA" />
        <input type="hidden" name="returnUrl" value="${resultUrl}" />
        <input type="hidden" name="serviceUrl" value="${serverUrl}" />
        <input type="hidden" name="merchantSignature" value="${signature}" />
        <script>document.forms[0].submit();</script>
      </form>
    `;

    res.setHeader('Content-Type', 'text/html');
    res.send(html);
  } catch (err) {
    console.error('‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ WayForPay:', err);
    res.status(500).send('WayForPay error');
  }
});

export default router;
 import express from 'express';
import crypto from 'crypto';
import TempOrder from '../../models/TempOrder.js';
import CartItem from '../../models/CartItem.js';

const router = express.Router();

function generateSignature(secretKey, values) {
  return crypto.createHmac('md5', secretKey).update(values.join(';')).digest('hex');
}

router.post('/', async (req, res) => {
  try {
    const { amount, order, resultUrl, serverUrl } = req.body;
    console.log('üßæ ORDER from frontend:', order);

    const merchantAccount = process.env.WAYFORPAY_MERCHANT;
    const merchantDomainName = 'latore.shop';
    const secretKey = process.env.WAYFORPAY_SECRET;
    const orderReference = crypto.randomUUID();
    const orderDate = Math.floor(Date.now() / 1000);
    const currency = 'UAH'; // –í–ê–ñ–õ–ò–í–û: —Ç—ñ–ª—å–∫–∏ UAH
    if (currency !== 'UAH') {
        console.error('‚ùå currency –Ω–µ –≤–∞–ª—ñ–¥–Ω–∞:', currency);
      }
      
    if (!order.sessionId) return res.status(400).send('Missing sessionId');
    const cartItems = await CartItem.find({ sessionId: order.sessionId }).populate('productId');

    if (!cartItems.length) return res.status(400).send('Cart is empty');
    console.log('üßæ CART ITEMS:', cartItems.map(item => item.name || item.productName || item));

    // üîπ –û—á–∏—â–µ–Ω–Ω—è —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    const cleanAmount = typeof amount === 'string'
  ? amount.replace(/[^\d.]/g, '') // –ø—Ä–∏–±–∏—Ä–∞—î –≤—Å–µ –∫—Ä—ñ–º —Ü–∏—Ñ—Ä —ñ –∫—Ä–∞–ø–∫–∏
  : amount;

const formattedAmount = Number(cleanAmount).toFixed(2);

    const productNames = cartItems.map(i =>
        String(i.name)
          .replace(/–≥—Ä–Ω/gi, '')
          .replace(/'/g, "‚Äô")   // ‚Üê –∑–∞–º—ñ–Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω–∏—Ö –ª–∞–ø–æ–∫
          .replace(/"/g, "")  
          .replace(/['"]/g, '')  // ‚Üê –ø—Ä–∏–±—Ä–∞—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω—ñ –ª–∞–ø–∫–∏, —è–∫—â–æ —î
          .trim()
      );
     
    const productCounts = cartItems.map(i =>
      String(i.quantity)
    );
    const productPrices = cartItems.map(i =>
      Number(i.price).toFixed(2)
    );

    // üîê –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É
    const signatureSource = [
      merchantAccount,
      merchantDomainName,
      orderReference,
      orderDate.toString(),
      formattedAmount,
      currency,
      ...productNames,
      ...productCounts,
      ...productPrices
    ].map(v => String(v).trim());

    console.log('üìê –°—Ç—Ä—ñ—á–∫–∞ –ø—ñ–¥–ø–∏—Å—É:', signatureSource.join(';'));
    const signature = generateSignature(secretKey, signatureSource);
    console.log('‚úÖ –ü—ñ–¥–ø–∏—Å:', signature);

    // ‚è≥ –ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    await TempOrder.create({ orderId: orderReference, orderData: order });

    // üßæ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML-—Ñ–æ—Ä–º–∏
    const html = `
      <form method="POST" action="https://secure.wayforpay.com/pay">
        <input type="hidden" name="merchantAccount" value="${merchantAccount}" />
        <input type="hidden" name="merchantDomainName" value="${merchantDomainName}" />
        <input type="hidden" name="orderReference" value="${orderReference}" />
        <input type="hidden" name="orderDate" value="${orderDate}" />
        <input type="hidden" name="amount" value="${formattedAmount}" />
        <input type="hidden" name="currency" value="${currency}" />
        ${productNames.map(p => `<input type="hidden" name="productName" value="${p}" />`).join('')}
        ${productCounts.map(c => `<input type="hidden" name="productCount" value="${c}" />`).join('')}
        ${productPrices.map(p => `<input type="hidden" name="productPrice" value="${p}" />`).join('')}
        <input type="hidden" name="language" value="UA" />
        <input type="hidden" name="returnUrl" value="${resultUrl}" />
        <input type="hidden" name="serviceUrl" value="${serverUrl}" />
        <input type="hidden" name="merchantSignature" value="${signature}" />
        <script>document.forms[0].submit();</script>
      </form>
    `;

    res.setHeader('Content-Type', 'text/html');
    res.send(html);
  } catch (err) {
    console.error('‚ùå WayForPay –ø–æ–º–∏–ª–∫–∞:', err);
    res.status(500).send('WayForPay error');
  }
});


router.post('/callback', async (req, res) => {
    try {
      const secretKey = process.env.WAYFORPAY_SECRET;
      const {
        merchantAccount,
        orderReference,
        amount,
        currency,
        authCode,
        cardPan,
        transactionStatus,
        reason,
        reasonCode,
        fee,
        paymentSystem,
        time,
        merchantSignature,
      } = req.body;
  
      // ‚ö†Ô∏è –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å–∏–≥–Ω–∞—Ç—É—Ä—É (–≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—é—Ç—å –±—É—Ç–∏ –≤ —Ç–æ–º—É –∂ –ø–æ—Ä—è–¥–∫—É, —â–æ –π –Ω–∞ —Å–∞–π—Ç—ñ WayForPay)
      const signatureSource = [
        merchantAccount,
        orderReference,
        amount,
        currency,
        authCode,
        cardPan,
        transactionStatus,
        reason,
        reasonCode,
        fee,
        paymentSystem,
        time,
      ];
  
      const expectedSignature = crypto
        .createHmac('md5', secretKey)
        .update(signatureSource.join(';'))
        .digest('hex');
  
      // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É
      if (merchantSignature !== expectedSignature) {
        console.warn('‚ùå Invalid signature in callback');
        return res.status(403).send('Invalid signature');
      }
  
      // ‚úÖ –Ø–∫—â–æ –ø–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–∏–π ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      if (transactionStatus === 'Approved') {
        const temp = await TempOrder.findOne({ orderId: orderReference });
        if (!temp) return res.status(404).send('Temp order not found');
  
        const savedOrder = await Order.create({
          ...temp.orderData,
          isPaid: true,
          paymentId: orderReference,
        });
  
        await TempOrder.deleteOne({ orderId: orderReference });
  
        // ‚è© –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ—à—Ç—É
        await sendClientConfirmation(savedOrder);
        await sendAdminNotification(savedOrder);
  
        // ‚õîÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É
        if (savedOrder.sessionId) {
          await CartItem.deleteMany({ sessionId: savedOrder.sessionId });
        }
  
        return res.status(200).send('OK');
      }
  
      // –Ø–∫—â–æ –Ω–µ Approved ‚Äî –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
      res.status(200).send('Ignored');
    } catch (err) {
      console.error('‚ùå WayForPay callback error:', err);
      res.status(500).send('Callback error');
    }
  });

export default router;
*/}