import express from 'express';
import mongoose from 'mongoose';
import Order from '../models/Order.js';
import CartItem from '../models/CartItem.js';
import { sendClientConfirmation, sendAdminNotification } from '../utils/mailer.js';

const router = express.Router();

// GET /api/orders/status?order=<id|paymentId>
router.get('/status', async (req, res) => {
  const { order } = req.query;
  if (!order) return res.status(400).json({ isPaid: false, error: 'Missing order ID' });

  try {
    // 1) –ø—Ä–æ–±—É—î–º–æ —è–∫ _id
    let found = null;
    if (mongoose.Types.ObjectId.isValid(order)) {
      found = await Order.findById(order).lean();
    }
    // 2) —è–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ ‚Äî —è–∫ paymentId
    if (!found) {
      found = await Order.findOne({ paymentId: order }).lean();
    }

    // ‚ö†Ô∏è –©–æ–± –Ω–µ –ª–∞–º–∞—Ç–∏ —Ñ—Ä–æ–Ω—Ç, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 200 –∑–∞–≤–∂–¥–∏, –ø—Ä–æ—Å—Ç–æ isPaid = false —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    if (!found) return res.json({ isPaid: false });

    return res.json({ isPaid: !!found.isPaid });
  } catch (err) {
    console.error('‚ùå GET /api/orders/status:', err);
    return res.status(500).json({ isPaid: false });
  }
});

// POST /api/orders ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
router.post('/', async (req, res) => {
  try {
    const order = { ...req.body };

    // üîë –ó–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –≥–µ–Ω–µ—Ä—É—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è —î–¥–Ω–æ—Å—Ç—ñ –∑ WayForPay
    const paymentId = new mongoose.Types.ObjectId();
    order._id = paymentId;          // —Ä–æ–±–∏–º–æ –π–æ–≥–æ _id –¥–æ–∫—É–º–µ–Ω—Ç–∞
    order.paymentId = paymentId;     // –¥—É–±–ª—é—î–º–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ–ª—ñ (–∑—Ä—É—á–Ω–æ)
    order.isPaid = false;

    // ‚¨áÔ∏è –ü—ñ–¥—Ç—è–≥—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –∫–æ—Ä–∑–∏–Ω–∏ –∑–∞ sessionId
    const cartItems = await CartItem.find({ sessionId: order.sessionId }).lean();

    order.items = cartItems.map(item => ({
      name: item.name,
      productId: item.productId,
      color: item.color,
      size: item.size,
      quantity: item.quantity,
      // –≤—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–Ω–∏–∂–∫—É
      price: typeof item.discountPrice === 'number' ? item.discountPrice : item.price,
      originalPrice: item.price,
      discountPrice: item.discountPrice ?? null,
    }));

    // ‚¨áÔ∏è –ü—ñ–¥—Å—É–º–æ–∫ –ø–æ –∑–Ω–∏–∂–∫–∞—Ö
    const amount = cartItems.reduce((acc, item) => {
      const unit = typeof item.discountPrice === 'number' ? item.discountPrice : item.price;
      return acc + unit * item.quantity;
    }, 0);

    order.amount = Number(amount.toFixed(2));

    // ‚¨áÔ∏è –Ø–∫—â–æ –æ–ø–ª–∞—Ç–∞ –Ω–µ –æ–Ω–ª–∞–π–Ω ‚Äî –≤–≤–∞–∂–∞—î–º–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
    if (order.paymentMethod === 'no-payment') {
      order.amountPaid = 0;
    }

    const savedOrder = await Order.create(order);
    console.log('‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', savedOrder._id);

    // ‚úâÔ∏è –õ–∏—Å—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è no-payment
    if (order.paymentMethod === 'no-payment') {
      await sendClientConfirmation(savedOrder);
      await sendAdminNotification(
        savedOrder,
        Array.isArray(savedOrder.items) && savedOrder.items.length > 0 ? savedOrder.items : cartItems
      );
    }

    // üßπ –û—á–∏—â–µ–Ω–Ω—è –∫–æ—Ä–∑–∏–Ω–∏ ‚Äî —Ç—ñ–ª—å–∫–∏ –¥–ª—è no-payment
    if (order.paymentMethod === 'no-payment' && order.sessionId) {
      await CartItem.deleteMany({ sessionId: order.sessionId });
      console.log('üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è sessionId:', order.sessionId);
    }

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π paymentId/_id ‚Äî —Ñ—Ä–æ–Ω—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –π–æ–≥–æ —è–∫ ?order=...
    res.status(201).json(savedOrder);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
  }
});

export default router;
