import express from 'express';
import Order from '../models/Order.js';
import CartItem from '../models/CartItem.js'; 
import { sendClientConfirmation, sendAdminNotification } from '../utils/mailer.js';

const router = express.Router();
// routes/orders.js
router.get('/status', async (req, res) => {
  const { order } = req.query;
  if (!order) return res.status(400).json({ error: 'Missing order ID' });

  const found = await Order.findOne({ paymentId: order });
  if (!found) return res.status(404).json({ isPaid: false });

  res.json({ isPaid: found.isPaid });
});
router.post('/', async (req, res) => {
  try {
    const order = req.body;
    console.log('üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', order);
    console.log('üß™ sessionId:', order.sessionId);

    // ‚¨áÔ∏è –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –∫–æ—Ä–∑–∏–Ω–∏
    const cartItems = await CartItem.find({ sessionId: order.sessionId });

    order.items = cartItems.map(item => ({
      name: item.name,
      productId: item.productId,
      color: item.color,
      size: item.size,
      quantity: item.quantity,
      price: item.price,
    }));

    // ‚¨áÔ∏è –û–±—á–∏—Å–ª—é—î–º–æ –ø–æ–≤–Ω—É —Å—É–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    const amount = cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);
    order.amount = Number(amount.toFixed(2));

    // ‚¨áÔ∏è –Ø–∫—â–æ –æ–ø–ª–∞—Ç–∞ –Ω–µ –æ–Ω–ª–∞–π–Ω, –≤–≤–∞–∂–∞—î–º–æ —â–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
    if (order.paymentMethod === 'no-payment') {
      order.amountPaid = 0;
    }

    const savedOrder = await Order.create(order);
    console.log('‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', savedOrder);

    // ‚¨áÔ∏è –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ª–∏—Å—Ç–∏, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –±–µ–∑ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∏
    if (order.paymentMethod === 'no-payment') {
      await sendClientConfirmation(savedOrder);
      await sendAdminNotification(
        savedOrder,
        Array.isArray(savedOrder.items) && savedOrder.items.length > 0
          ? savedOrder.items
          : cartItems
      );
    }

    // ‚¨áÔ∏è –û—á–∏—â–∞—î–º–æ –∫–æ—Ä–∑–∏–Ω—É, —è–∫—â–æ –±–µ–∑ –æ–ø–ª–∞—Ç–∏
    if (order.paymentMethod === 'no-payment' && order.sessionId) {
      await CartItem.deleteMany({ sessionId: order.sessionId });
      console.log('üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è sessionId:', order.sessionId);
    }

    res.status(201).json(savedOrder);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
  }
});

{/*}
router.post('/', async (req, res) => {
  try {
    const order = req.body;
    console.log('üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', order);
    console.log('üß™ sessionId:', order.sessionId);
    // ‚¨áÔ∏è –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ CartItem
    const cartItems = await CartItem.find({ sessionId: order.sessionId });

    order.items = cartItems.map(item => ({
      name: item.name,
      productId: item.productId,
      color: item.color,
      size: item.size,
      quantity: item.quantity,
      price: item.price,
    }));

    const savedOrder = await Order.create(order);
    console.log('‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', savedOrder);

    // ‚¨áÔ∏è –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–∏—Å—Ç–∏
    if (order.paymentMethod === 'no-payment') {
  await sendClientConfirmation(order);
  await sendAdminNotification(
    order,
    Array.isArray(order.items) && order.items.length > 0 ? order.items : cartItems
  );
}
{/*
    if (order.paymentMethod === 'no-payment') {
      await sendClientConfirmation(order);
      await sendAdminNotification(order, order.items.length ? order.items : cartItems);
await sendAdminNotification(order, cartItems); // ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç—É—Ç
    }
// üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ –æ–ø–ª–∞—Ç–∏
if (order.paymentMethod === 'no-payment' && order.sessionId) {
  await CartItem.deleteMany({ sessionId: order.sessionId });
  console.log('üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è sessionId:', order.sessionId);
}


    res.status(201).json(savedOrder);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
  }
});*/}

export default router;
