import express from 'express';
import CartItem from '../models/CartItem.js';
import Product from '../models/Product.js';

const router = express.Router();

// === GET: –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç—É ===
router.get('/', async (req, res) => {
  const { sessionId } = req.query;
  if (!sessionId) return res.status(400).json({ message: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ sessionId' });

  try {
    const cartItems = await CartItem.find({ sessionId });
    const productIds = cartItems.map(item => item.productId);
    const products = await Product.find({ id: { $in: productIds } });

    const formatted = cartItems.map(item => {
      const product = products.find(p => p.id === item.productId);
      return {
        id: item._id,
        productId: item.productId,
        quantity: item.quantity,
        color: item.color,
        size: item.size,
        price: item.price, 
        discountPrice: item.discountPrice,
        image: product?.image,
        name: item.name,  
      };
    });

    res.json({ cart: formatted });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∑–∏–Ω–∏:', error);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// === POST: –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä ===
router.post('/', async (req, res) => {
  let { sessionId, productId, color, size, quantity = 1, discountPrice  } = req.body;

  try {
    quantity = parseInt(quantity) || 1;

    if (!sessionId || !productId || !color || !size) {
      return res.status(400).json({ message: '–í–∫–∞–∂—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è' });
    }

    const product = await Product.findOne({ id: productId });
    if (!product) {
      return res.status(404).json({ message: '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    const name =
      product.translations?.UA?.name ||
      product.translations?.EN?.name ||
      product.name ||
      product.sku;

   
const price = discountPrice ?? product.price;

    const existing = await CartItem.findOne({ sessionId, productId, color, size });

    if (existing) {
  existing.quantity += quantity;
   if (discountPrice !== undefined) {
    existing.discountPrice = discountPrice;
    existing.price = price; // üî• –æ–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–Ω—É –≤ –∫–æ—Ä–∑–∏–Ω—ñ!
  }
  await existing.save();
} else {
  await CartItem.create({
    sessionId,
    productId,
    name,
    price,
    discountPrice,
    color,
    size,
    quantity,
  });
}

    res.json({ message: '–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏' });

  } catch (error) {
    console.error('‚ùå POST /api/cart –ø–æ–º–∏–ª–∫–∞:', error);
    res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É' });
  }
});

// === PUT: –û–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å ===
router.put('/', async (req, res) => {
  const { cartId, quantity } = req.body;
  if (!cartId || quantity < 1) return res.status(400).json({ message: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ' });

  try {
    await CartItem.findByIdAndUpdate(cartId, { quantity });
    res.json({ message: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('‚ùå PUT /api/cart –ø–æ–º–∏–ª–∫–∞:', error);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å' });
  }
});

// === DELETE: –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä ===
router.delete('/', async (req, res) => {
  const { cartId } = req.body;
  if (!cartId) return res.status(400).json({ message: '–ù–µ –≤–∫–∞–∑–∞–Ω–æ cartId' });

  try {
    await CartItem.findByIdAndDelete(cartId);
    res.json({ message: '–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('‚ùå DELETE /api/cart –ø–æ–º–∏–ª–∫–∞:', error);
    res.status(500).json({ message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä' });
  }
});

export default router;
